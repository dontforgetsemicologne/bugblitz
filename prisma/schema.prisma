generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String           @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String           @default("user")
  isEmailVerified   Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  accounts            Account[]
  createdProjects     Project[]         @relation("ProjectCreator")
  projectMemberships  ProjectMember[]
  assignedBugs        Bug[]             @relation("BugAssignee")
  reportedBugs        Bug[]             @relation("BugReporter")
  comments            Comment[]
}

model Account {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.String
  access_token      String?   @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.String
  session_state     String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Project {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relations
  creatorId   String          @db.ObjectId
  creator     User            @relation("ProjectCreator", fields: [creatorId], references: [id])
  members     ProjectMember[]
  bugs        Bug[]           @relation("ProjectBugs")
}

model ProjectMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  projectId String   @db.ObjectId
  role      String   @default("member") // Could be member, admin, etc.
  joinedAt  DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Bug {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      BugStatus     @default(OPEN)
  priority    Priority      @default(MEDIUM)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  projectId   String        @db.ObjectId
  project     Project       @relation("ProjectBugs", fields: [projectId], references: [id], onDelete: Cascade)
  
  reporterId  String        @db.ObjectId
  reporter    User          @relation("BugReporter", fields: [reporterId], references: [id])
  
  assigneeId  String?       @db.ObjectId
  assignee    User?         @relation("BugAssignee", fields: [assigneeId], references: [id])
  
  comments    Comment[]
  labels      BugLabel[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  bugId     String   @db.ObjectId
  bug       Bug      @relation(fields: [bugId], references: [id], onDelete: Cascade)
  
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

model Label {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  color       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  bugs        BugLabel[]
}

model BugLabel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bugId     String   @db.ObjectId
  labelId   String   @db.ObjectId
  createdAt DateTime @default(now())
  
  // Relations
  bug       Bug      @relation(fields: [bugId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id])

  @@unique([bugId, labelId])
}

enum BugStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}